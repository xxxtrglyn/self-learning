// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  fullname      String?
  email         String?   @unique
  emailVerified DateTime?
  username      String    @unique
  password      String
  avatar        String?
  dob           DateTime?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")

  notes      Note[]
  goals      Goal[]
  documents  Document[]
  timetables TimeTable[]
  accounts   Account[]
  sessions   Session[]

  @@map(name: "users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TimeTable {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  title     String   @unique
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  timelines Timeline[]

  @@map(name: "time_tables")
}

model Timeline {
  id          String    @id @default(cuid())
  timetable   TimeTable @relation(fields: [timeTableId], references: [id])
  timeTableId String
  startAt     DateTime  @map(name: "start_at")
  endAt       DateTime  @map(name: "end_at")
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  moreDetail  String?   @map(name: "more_detail")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")

  @@map(name: "timelines")
}

model Document {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  subjectName String   @unique @map(name: "subject_name")
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  lessons Lesson[]

  @@map(name: "documents")
}

model Lesson {
  id         String   @id @default(cuid())
  document   Document @relation(fields: [documentId], references: [id])
  documentId String
  lessonName String   @unique @map(name: "lesson_name")
  content    String?
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt @map(name: "updated_at")

  @@map("lessons")
}

model Goal {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  title     String   @unique
  completed Int      @default(0)
  total     Int      @default(0)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  todos Todo[]

  @@map(name: "goals")
}

model Todo {
  id          String   @id @default(cuid())
  goal        Goal     @relation(fields: [goalId], references: [id])
  goalId      String
  label       String   @unique
  isCompleted Boolean  @default(false) @map(name: "is_completed")
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "todos")
}

model Note {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  content   String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "notes")
}
