// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  fullname      String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  avatar        String?
  dob           DateTime?
  phone         Int?
  role          String
  quotes        String?
  city          String?
  job           String?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  notes        Note[]
  goals        Goal[]
  documents    Document[]
  logtimes     LogTime[]
  // timetables   TimeTable[]
  // accounts     Account[]
  // sessions     Session[]
  joinedRooms  JoinedRoom[]
  messages     MessageLine[]
  timecontrols TimeControl[]

  @@map(name: "users")
}

model TimeItem {
  id            String   @id @default(cuid())
  amount        Int
  description   String
  timeControlId String
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @updatedAt @map(name: "updated_at")

  timeControl TimeControl @relation(fields: [timeControlId], references: [id])
}

model TimeControl {
  id        String   @id @default(cuid())
  date      DateTime
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  timeitems TimeItem[]
}

model MessageLine {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    String
  content   String
  createdAt DateTime @default(now()) @map(name: "created_at")
}

model JoinedRoom {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    String
  isActived Boolean?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@id([userId, roomId])
}

model Room {
  id         String   @id @default(cuid())
  roomName   String
  totalUser  Int
  coverImage String?
  admin      String
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt @map(name: "updated_at")

  joinsRoom JoinedRoom[]
  messages  MessageLine[]
}

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique @map("session_token")
//   userId       String   @map("user_id")
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model Account {
//   id                 String  @id @default(cuid())
//   userId             String  @map("user_id")
//   type               String
//   provider           String
//   providerAccountId  String  @map("provider_account_id")
//   refresh_token      String?
//   access_token       String?
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?
//   session_state      String?
//   oauth_token_secret String?
//   oauth_token        String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model VerificationToken {
//   id         Int      @id @default(autoincrement())
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

// model TimeTable {
//   id        String     @id @default(cuid())
//   user      User       @relation(fields: [userId], references: [id])
//   userId    String
//   title     String
//   createdAt DateTime   @default(now()) @map(name: "created_at")
//   updatedAt DateTime   @updatedAt @map(name: "updated_at")
//   timelines Timeline[]

//   @@unique([userId, title])
//   @@map(name: "time_tables")
// }

// model Timeline {
//   id          String    @id @default(cuid())
//   timetable   TimeTable @relation(fields: [timeTableId], references: [id])
//   timeTableId String
//   startAt     DateTime? @map(name: "start_at")
//   endAt       DateTime? @map(name: "end_at")
//   createdAt   DateTime  @default(now()) @map(name: "created_at")
//   moreDetail  String?   @map(name: "more_detail")
//   updatedAt   DateTime  @updatedAt @map(name: "updated_at")

//   @@unique([startAt, timeTableId])
//   @@map(name: "timelines")
// }

model LogTime {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  document   Document @relation(fields: [documentId], references: [id])
  documentId String
  learnTime  Int
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt @map(name: "updated_at")

  @@unique([userId, documentId])
}

model Document {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  subjectName String    @map(name: "subject_name")
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")
  logtimes    LogTime[]

  lessons Lesson[]

  @@unique([userId, subjectName])
  @@map(name: "documents")
}

model Lesson {
  id         String   @id @default(cuid())
  document   Document @relation(fields: [documentId], references: [id])
  documentId String
  lessonName String   @map(name: "lesson_name")
  content    String?
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt @map(name: "updated_at")

  @@map("lessons")
}

model Goal {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  title     String
  start     DateTime
  end       DateTime
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  todos Todo[]

  @@unique([userId, title])
  @@map(name: "goals")
}

model Todo {
  id          String   @id @default(cuid())
  goal        Goal     @relation(fields: [goalId], references: [id])
  goalId      String
  label       String   @unique
  isCompleted Boolean  @default(false) @map(name: "is_completed")
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  @@unique([goalId, label])
  @@map(name: "todos")
}

model Note {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  content   String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "notes")
}
